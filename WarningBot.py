import psycopg2
from psycopg2 import Error
import telebot
from telebot import types
import logging
from datetime import datetime
import os
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main(sql_file, sql_insert, sql_select):
    load_dotenv()

    BOT_TOKEN = os.getenv('BOT_TOKEN')
    CHAT_ID = os.getenv('CHAT_ID')

    DB_CONFIG = {
        "user": os.getenv('USER'),
        "password": os.getenv('PASSWORD'),
        "host": os.getenv('HOST'),
        "port": os.getenv('PORT'),
        "database": os.getenv('DATABASE'),
    }

    send_telegram_message(BOT_TOKEN, CHAT_ID, DB_CONFIG, sql_file, sql_insert, sql_select)


def get_existing_credit_ids(connection, sql_select):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–∑ –ë–î"""
    try:
        cursor = connection.cursor()
        query = open(sql_select, 'r', encoding='utf-8').read()
        cursor.execute(query)
        results = cursor.fetchall()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∫—Ä–µ–¥–∏—Ç–æ–≤
        return {result[0] for result in results}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –∫—Ä–µ–¥–∏—Ç–æ–≤: {e}")
        return set()
    finally:
        if cursor: cursor.close()


def save_new_records(connection, new_records, sql_insert):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î"""
    try:
        cursor = connection.cursor()
        query = open(sql_insert, 'r', encoding='utf-8').read()

        for record in new_records:
            if len(record) >= 2:
                cursor.execute(
                    query,
                    (record[1], record[0])  # credit_id, deal_id
                )

        connection.commit()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(new_records)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        connection.rollback()
    finally:
        if cursor: cursor.close()


def get_data_from_db(DB_CONFIG, sql_file):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    connection = None
    cursor = None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        connection = psycopg2.connect(**DB_CONFIG)
        cursor = connection.cursor()

        # –í–∞—à –∑–∞–ø—Ä–æ—Å
        query = open(sql_file, 'r', encoding='utf-8').read()
        logger.info(f"–í—ã–ø–æ–ª–Ω—è—é sql —Ñ–∞–π–ª: {sql_file}")

        cursor.execute(query)
        data = cursor.fetchall()
        columns = [desc[0] for desc in cursor.description]

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î")
        return data, columns, connection

    except (Exception, psycopg2.Error) as error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {error}")
        return None, None, None
    finally:
        if cursor:
            cursor.close()


def get_new_records_only(data, existing_credit_ids):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ ID –∫—Ä–µ–¥–∏—Ç–∞"""
    new_records = []

    for record in data:
        if len(record) >= 2:
            credit_id = record[1]  # –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü - ID –∫—Ä–µ–¥–∏—Ç–∞
            # –ï—Å–ª–∏ ID –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ—Ç –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö - —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
            if credit_id not in existing_credit_ids:
                new_records.append(record)

    return new_records


def format_data(data, columns):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if not data:
        return "üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å–µ 'attention'"

    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    message = f"üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ' –Ω–∞ {current_time}\n\n"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    message += " | ".join(columns) + "\n"
    message += "-" * 50 + "\n"

    # –î–∞–Ω–Ω—ã–µ
    for row in data:
        formatted_row = []
        for item in row:
            if item is None:
                formatted_row.append("NULL")
            elif isinstance(item, (int, float)):
                formatted_row.append(str(item))
            else:
                formatted_row.append(str(item))

        message += " | ".join(formatted_row) + "\n"

    message += f"\nüìà –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(data)}"

    return message


def send_telegram_message(BOT_TOKEN, CHAT_ID, DB_CONFIG, sql_file, sql_insert, sql_select):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    connection = None
    try:
        if not BOT_TOKEN or not CHAT_ID:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã BOT_TOKEN –∏–ª–∏ CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        data, columns, connection = get_data_from_db(DB_CONFIG, sql_file)

        if data is None:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            logger.error(error_msg)
            return False

        if not data:
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –∫—Ä–µ–¥–∏—Ç–æ–≤
        existing_credit_ids = get_existing_credit_ids(connection, sql_select)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(existing_credit_ids)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ID –∫—Ä–µ–¥–∏—Ç–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        new_records = get_new_records_only(data, existing_credit_ids)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_records)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π - –≤—ã—Ö–æ–¥–∏–º
        if not new_records:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        save_new_records(connection, new_records, sql_insert)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = telebot.TeleBot(BOT_TOKEN)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        formatted_message = format_data(new_records, columns)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(formatted_message) > 4096:
            for x in range(0, len(formatted_message), 4096):
                bot.send_message(CHAT_ID, formatted_message[x:x + 4096])
        else:
            bot.send_message(CHAT_ID, formatted_message)

        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å {len(new_records)} –Ω–æ–≤—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {CHAT_ID}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    finally:
        if connection:
            connection.close()
            logger.info("PostgreSQL connection is closed")


if __name__ == '__main__':
    main('sql_query.sql', 'sql_insert.sql', 'sql_check.sql')